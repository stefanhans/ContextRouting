<?xml version="1.0" encoding="UTF-8"?>
<snippets>
    <snippet group="C++" trigger="class" id="cpp_genericclass" complement="Send and receive via TCP" removed="false" modified="true">class $name$
{
public:
    $name$() {}
};</snippet>
    <snippet group="C++" trigger="cs_check" id="" complement="ip adress" removed="false" modified="false">
if(! command.at(2).contains(QRegExp(&quot;^\\d\\d?\\d?.\\d\\d?\\d?.\\d\\d?\\d?.\\d\\d?\\d?$&quot;))) {
    
    errorStream &lt;&lt; &quot;Error: CMD(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;): No valid IP address!&quot; &lt;&lt; endl;
    man(&quot;usage CMD&quot;);
    return 1;
}

</snippet>
    <snippet group="C++" trigger="cs_check" id="" complement="port number" removed="false" modified="false">
if(! command.at(2).contains(QRegExp(&quot;^\\d\\d?\\d?\\d?\\d?$&quot;))) {
    
    errorStream &lt;&lt; &quot;Error: CMD(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;): No valid port number!&quot; &lt;&lt; endl;
    man(&quot;usage CMD&quot;);
    return 1;
}

</snippet>
    <snippet group="C++" trigger="cs_check" id="" complement="wordlist" removed="false" modified="false">
if(! command.at(2).contains(QRegExp(&quot;^(...|...)$&quot;))) {

    errorStream &lt;&lt; &quot;Error: CMD(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;): No valid ...!&quot; &lt;&lt; endl;
    man(&quot;usage CMD&quot;);
    return 1;
}

</snippet>
    <snippet group="C++" trigger="cs_cip" id="" complement="Create QByteArray with default CIP" removed="false" modified="false">
QByteArray byteArray;

/**
 * CIP for &quot;default&quot;
 */
qDebug() &lt;&lt; &quot;default&quot; &lt;&lt; endl;

// Header: request (1), profile (1), version (1), channel (1)
byteArray.append(QByteArray(4, '\0'));

// Header: UUID (16)
QUuid uuid;
uuid = QUuid::createUuid();
QByteArray uuid_arr = uuid.toRfc4122();

for(int j=0; j&lt;16;j++) {
    byteArray.append(uuid_arr.at(j));
}

// Header: Empty IP address (4), port number (2), time (8), type (1), size (1)
byteArray.append(QByteArray(16, '\0'));

// Contextinformation: type (1), root-CIC (2), size (1)
byteArray.append(QByteArray(4, '\0'));

// Application: type (1), size (1)
byteArray.append(QByteArray(2, '\0'));

</snippet>
    <snippet group="C++" trigger="cs_cip" id="" complement="Create QByteArray with maximum sized CIP" removed="false" modified="false">
QByteArray byteArray;

/**
 * CIP for &quot;max&quot;
 */
qDebug() &lt;&lt; &quot;max&quot; &lt;&lt; endl;

// Header: fix
byteArray.append(QByteArray(34, '\0'));

// Header: size (1)
byteArray.append(QByteArray(QByteArray::fromHex(&quot;0xff&quot;)));
byteArray.append(QByteArray(255, '\0'));

// Contextinformation: fix
byteArray.append(QByteArray(2, '\0'));

// Contextinformation: size (255)
byteArray.append(QByteArray(QByteArray::fromHex(&quot;0xff&quot;)));
byteArray.append(QByteArray(255*2, '\0'));

// Application Data: fix
byteArray.append(QByteArray(0, '\0'));

// Application Data: size (255)
byteArray.append(QByteArray(QByteArray::fromHex(&quot;0xff&quot;)));
byteArray.append(QByteArray(255, '\0'));


</snippet>
    <snippet group="C++" trigger="cs_cip" id="" complement="Create QByteArray with random sized CIP" removed="false" modified="false">
#include &lt;QtMath&gt;
#define CRN_RANDOM_DIVISOR (RAND_MAX/255)

QByteArray byteArray;

/**
 * CIP for &quot;random&quot;
 */
qDebug() &lt;&lt; &quot;random&quot; &lt;&lt; endl;

QByteArray randValues;
qsrand(QTime::currentTime().msec());
for(int i=0; i &lt;= 1064; i++) {
    randValues.append(qFloor(qrand()/CRN_RANDOM_DIVISOR));
}


int i = 0;
quint8 rand;

// Header: request (1)
byteArray.append(randValues.at(i++));


// Header: profile (1)
byteArray.append(randValues.at(i++));


// Header: version (1)
byteArray.append(randValues.at(i++));


// Header: channel (1)
byteArray.append(randValues.at(i++));

// Header: UUID (16)
QUuid uuid;
uuid = QUuid::createUuid();
QByteArray uuid_arr = uuid.toRfc4122();

for(int j=0; j&lt;16;j++) {
    
    byteArray.append(uuid_arr.at(j));
}

// Header: Empty IP address (4) and port number (2)
byteArray.append(QByteArray(6, '\0'));

// Header: time (8)
byteArray.append(QByteArray(8, '\0'));

// Header: type (1)
byteArray.append(randValues.at(i++));

// Header: size (1) and data
rand = randValues.at(i++);
byteArray.append(rand);
byteArray.append(QByteArray(rand, rand));

// Contextinformation: type (1)
byteArray.append(randValues.at(i++));

// Contextinformation: root-CIC (2)
byteArray.append(randValues.at(i++));
byteArray.append(randValues.at(i++));

// Contextinformation: size (1)
rand = randValues.at(i++);
byteArray.append(rand);
byteArray.append(QByteArray(rand*2, rand));

// Application: type (1)
byteArray.append(randValues.at(i++));

// Application: size (1)
rand = randValues.at(i++);
byteArray.append(rand);
byteArray.append(QByteArray(rand, rand));



</snippet>
    <snippet group="C++" trigger="cs_cip" id="" complement="Create QByteArray with RZV CIP" removed="false" modified="false">
QByteArray byteArray;

/**
 * CIP for &quot;rzv&quot;
 */
byteArray.append(QByteArray(42, '\0'));

</snippet>
    <snippet group="C++" trigger="cs_dump" id="" complement="Show QByteArray bytewise in binary format" removed="false" modified="false">
//QByteArray byteArray;

quint8 byte;
for(int b=0; b&lt;byteArray.size(); b++) {
    byte = byteArray.at(b);
    qDebug().noquote().nospace() &lt;&lt; QString(&quot;%1&quot;).arg(b).rightJustified(4) &lt;&lt; &quot;: &quot; &lt;&lt; QString(&quot;%1&quot;).arg(byte, 8, 2, QLatin1Char('0'));
}

</snippet>
    <snippet group="C++" trigger="cs_dump" id="" complement="Show QByteArray bytewise in hex format" removed="false" modified="false">
//QByteArray byteArray;

quint8 byte;
for(int b=0; b&lt;byteArray.size(); b++) {
    byte = byteArray.at(b);
    qDebug().noquote().nospace() &lt;&lt; QString(&quot;%1&quot;).arg(b).rightJustified(4) &lt;&lt; &quot;: &quot; &lt;&lt; QString(&quot;%1&quot;).arg(byte, 4, 16, QLatin1Char('0'));
}

</snippet>
    <snippet group="C++" trigger="cs_dump" id="" complement="Show QByteArray bytewise in integer format" removed="false" modified="false">
//QByteArray byteArray;

quint8 byte;
for(int b=0; b&lt;byteArray.size(); b++) {
    byte = byteArray.at(b);
    qDebug().noquote().nospace() &lt;&lt; QString(&quot;%1&quot;).arg(b).rightJustified(4) &lt;&lt; &quot;: &quot; &lt;&lt; QString(&quot;%1&quot;).arg(byte).rightJustified(4);
}

</snippet>
    <snippet group="C++" trigger="cs_readfile" id="" complement="QFile into QByteArray (1.0)" removed="false" modified="false">

/**
 * Read file
 */

QString infilePath;

infilePath = CIP_ROOT;
infilePath += &quot;/&quot; + command.at(1);

qDebug() &lt;&lt; &quot;infilePath: &quot; &lt;&lt; infilePath &lt;&lt; endl;

QFile infile(infilePath);
if (!infile.open(QIODevice::ReadOnly)) {

    errorStream &lt;&lt; &quot;Error: CMD(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;) can not read &quot; &lt;&lt; infilePath &lt;&lt; endl;
    errorStream &lt;&lt; infile.errorString() &lt;&lt; endl;
    return 1;
}

QByteArray byteArray;
byteArray = file.readAll();
file.close();

qDebug() &lt;&lt; &quot;byteArray.size(): &quot; &lt;&lt; byteArray.size() &lt;&lt; endl;


</snippet>
    <snippet group="C++" trigger="cs_send" id="" complement="Send and receive via TCP" removed="false" modified="false">


/**
 * Prepare send
 */
QHostAddress ip(command.at(2));

bool ok;
quint16 port(command.at(3).toUInt(&amp;ok));
if(!ok) {
    errorStream &lt;&lt; &quot;Cannot convert &quot;&lt;&lt; command.at(3) &lt;&lt; &quot; to base 2!&quot; &lt;&lt; endl;
    return 1;
}

/**
 * Prepare receipt
 */
int numRead = 0, numReadTotal = 0;
char buffer[MAXMSG];

QByteArray receipt;


/**
 * Send and receive via tcp
 */

if(command.at(1) == &quot;tcp&quot;) {
    qDebug() &lt;&lt; &quot;send via tcp&quot; &lt;&lt; endl;

    QTcpSocket *tcpSocket;
    tcpSocket= new QTcpSocket();
    tcpSocket-&gt;abort();
    tcpSocket-&gt;connectToHost(ip, port);

    if (tcpSocket-&gt;waitForConnected(5000)) { // waitForConnected(int msecs = 30000)

        qDebug() &lt;&lt; &quot;Connected!&quot;;
    }
    else {
        errorStream &lt;&lt; &quot;Error: send(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;) Not connected!&quot; &lt;&lt; endl;
        errorStream &lt;&lt; tcpSocket-&gt;errorString() &lt;&lt; endl;
        return 1;
    }

    int bytesWritten = tcpSocket-&gt;write(byteArray, byteArray.length());
    qDebug() &lt;&lt; &quot;BytesWritten: &quot; &lt;&lt; bytesWritten &lt;&lt; endl;


    qDebug() &lt;&lt; &quot;receive via tcp&quot; &lt;&lt; endl;
    forever {
        numRead  = tcpSocket-&gt;read(buffer, MAXMSG);

        numReadTotal += numRead;
        if (numRead == 0 &amp;&amp; !tcpSocket-&gt;waitForReadyRead(30)) { // waitForReadyRead(int msecs = 30000)
            break;
        }
    }
    qDebug() &lt;&lt; numReadTotal &lt;&lt; &quot; bytes red&quot; &lt;&lt; endl;

    tcpSocket-&gt;disconnectFromHost();
    tcpSocket-&gt;close();
    
}

receipt.append(buffer, numReadTotal);

quint8 byte;
for(int b=0; b&lt;receipt.size(); b++) {
    byte = receipt.at(b);
    qDebug().noquote().nospace() &lt;&lt; QString(&quot;%1&quot;).arg(b).rightJustified(4) &lt;&lt; &quot;: &quot; &lt;&lt; QString(&quot;%1&quot;).arg(byte, 8, 2, QLatin1Char('0'));
}
qDebug() &lt;&lt; endl;



</snippet>
    <snippet group="C++" trigger="cs_send" id="" complement="Send and receive via UDP" removed="false" modified="false">


/**
 * Prepare send
 */
QHostAddress ip(command.at(2));

bool ok;
quint16 port(command.at(3).toUInt(&amp;ok));
if(!ok) {
    errorStream &lt;&lt; &quot;Cannot convert &quot;&lt;&lt; command.at(3) &lt;&lt; &quot; to base 2!&quot; &lt;&lt; endl;
    return 1;
}

/**
 * Prepare receipt
 */
int numRead = 0, numReadTotal = 0;
char buffer[MAXMSG];

QByteArray receipt;


/**
 * Send and receive via udp
 */

if(command.at(1) == &quot;udp&quot;) {
    qDebug() &lt;&lt; &quot;send via udp&quot; &lt;&lt; endl;

    QUdpSocket *udpSocket;
    udpSocket= new QUdpSocket();
    udpSocket-&gt;abort();
    udpSocket-&gt;connectToHost(ip, port);

    if (udpSocket-&gt;waitForConnected(5000)) { // waitForConnected(int msecs = 30000)
        qDebug() &lt;&lt; &quot;Connected!&quot;;
    }
    else {
        errorStream &lt;&lt; &quot;Error: send(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;): Not connected!&quot; &lt;&lt; endl;
        errorStream &lt;&lt; udpSocket-&gt;errorString() &lt;&lt; endl;
        return 1;
    }

    int bytesWritten = udpSocket-&gt;write(byteArray, byteArray.length());
    qDebug() &lt;&lt; &quot;BytesWritten: &quot; &lt;&lt; bytesWritten &lt;&lt; endl;


    qDebug() &lt;&lt; &quot;receive via udp&quot; &lt;&lt; endl;
    forever {
        numRead  = udpSocket-&gt;read(buffer, MAXMSG);

        numReadTotal += numRead;
        if (numRead == 0 &amp;&amp; !udpSocket-&gt;waitForReadyRead(30)) { // waitForReadyRead(int msecs = 30000)
            break;
        }
    }
    qDebug() &lt;&lt; numReadTotal &lt;&lt; &quot; bytes red&quot; &lt;&lt; endl;

    if(numReadTotal==-1) {
        errorStream &lt;&lt; &quot;Error: read(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;): Problem while reading!&quot; &lt;&lt; endl;
        errorStream &lt;&lt; udpSocket-&gt;errorString() &lt;&lt; endl;
        return 1;
    }

    udpSocket-&gt;disconnectFromHost();
    udpSocket-&gt;close();

}

receipt.append(buffer, numReadTotal);

quint8 byte;
for(int b=0; b&lt;receipt.size(); b++) {
    byte = receipt.at(b);
    qDebug().noquote().nospace() &lt;&lt; QString(&quot;%1&quot;).arg(b).rightJustified(4) &lt;&lt; &quot;: &quot; &lt;&lt; QString(&quot;%1&quot;).arg(byte, 8, 2, QLatin1Char('0'));
}
qDebug() &lt;&lt; endl;



</snippet>
    <snippet group="C++" trigger="cs_toUInt" id="" complement="Convert QString in binary format to UInt" removed="false" modified="false">
//bool ok;

command.at(4).toUInt(&amp;ok, 2);

if(!ok) {
    errorStream &lt;&lt; &quot;Cannot convert &quot;&lt;&lt; command.at(4) &lt;&lt; &quot; to base 2!&quot; &lt;&lt; endl;
    return 1;
}


</snippet>
    <snippet group="C++" trigger="cs_toUInt" id="" complement="Convert QString in hex format to UInt" removed="false" modified="false">
//bool ok;

command.at(4).toUInt(&amp;ok, 16);

if(!ok) {
    errorStream &lt;&lt; &quot;Cannot convert &quot;&lt;&lt; command.at(4) &lt;&lt; &quot; to base 16!&quot; &lt;&lt; endl;
    return 1;
}


</snippet>
    <snippet group="C++" trigger="cs_toUInt" id="" complement="Convert QString in integer format to UInt" removed="false" modified="false">
//bool ok;

command.at(4).toUInt(&amp;ok, 10);

if(!ok) {
    errorStream &lt;&lt; &quot;Cannot convert &quot;&lt;&lt; command.at(4) &lt;&lt; &quot; to base 10!&quot; &lt;&lt; endl;
    return 1;
}


</snippet>
    <snippet group="C++" trigger="cs_writefile" id="" complement="QByteArray into QFile (1.0)" removed="false" modified="false">

/**
 * Write file
 */

QString outfilePath;
//QByteArray byteArray;

outfilePath = CIP_ROOT;
outfilePath += &quot;/&quot; + command.at(1);

qDebug() &lt;&lt; &quot;outfilePath: &quot; &lt;&lt; outfilePath &lt;&lt; endl;

QFile outfile(outfilePath);
if (!outfile.open(QIODevice::WriteOnly | QIODevice::Truncate)) {

    errorStream &lt;&lt; &quot;Error: CMD(&quot; &lt;&lt; command.join(&quot; &quot;) &lt;&lt; &quot;) can not write to file &quot; &lt;&lt; outfilePath &lt;&lt; endl;
    errorStream &lt;&lt; outfile.errorString() &lt;&lt; endl;

    return 1;
}
outfile.write(byteArray);
outfile.close();

qDebug() &lt;&lt; &quot;byteArray.size(): &quot; &lt;&lt; byteArray.size() &lt;&lt; endl;


</snippet>
</snippets>
